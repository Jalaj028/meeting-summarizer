const express = require('express');
const cors = require('cors');
const multer = require('multer');
const dotenv = require('dotenv');
const { Groq } = require('groq-sdk');
const nodemailer = require('nodemailer');

// Load environment variables
dotenv.config();

// Initialize Express app
const app = express();
const PORT = process.env.PORT || 5000;

// Initialize Groq AI client
const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY
});

// Setup middleware
const corsOptions = {
  origin: [
    'http://localhost:3000',
    'https://meeting-summarizer-frontend.vercel.app',
    /\.vercel\.app$/  // Allow any Vercel app subdomain
  ],
  credentials: true,
  optionsSuccessStatus: 200
};
app.use(cors(corsOptions));
app.use(express.json());

// Configure file upload (10MB max, using memory storage for Vercel)
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 10 * 1024 * 1024 }
});

// Setup email service
const sendEmail = async (recipients, subject, content) => {
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });

  return transporter.sendMail({
    from: process.env.EMAIL_USER,
    to: recipients.join(', '),
    subject: subject,
    html: `
      <h2>Meeting Summary</h2>
      <div style="white-space: pre-wrap; font-family: Arial, sans-serif;">
        ${content.replace(/\n/g, '<br>')}
      </div>
      <hr>
      <p style="color: #666; font-size: 12px;">
        Generated by AI Meeting Summarizer
      </p>
    `
  });
};

// ========== API ENDPOINTS ==========

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'Server is running' });
});

// Main summarization endpoint
app.post('/api/summarize', upload.single('transcript'), async (req, res) => {
  try {
    // Get the text to summarize
    let text = '';
    
    if (req.file) {
      // Read from uploaded file buffer (memory storage)
      text = req.file.buffer.toString('utf-8');
    } else if (req.body.text) {
      // Use direct text input
      text = req.body.text;
    } else {
      return res.status(400).json({ error: 'No transcript provided' });
    }

    // Get custom prompt or use default
    const prompt = req.body.prompt || 'Summarize the following text in bullet points';

    // Generate summary using Groq AI
    const completion = await groq.chat.completions.create({
      messages: [
        {
          role: 'system',
          content: 'You are a helpful assistant that summarizes meeting transcripts clearly and concisely.'
        },
        {
          role: 'user',
          content: `${prompt}\n\nText to summarize:\n${text}`
        }
      ],
      model: 'llama-3.3-70b-versatile',
      temperature: 0.7,
      max_tokens: 2048
    });

    const summary = completion.choices[0]?.message?.content || 'Unable to generate summary';

    res.json({
      success: true,
      summary: summary,
      originalLength: text.length,
      summaryLength: summary.length
    });

  } catch (error) {
    console.error('Summarization error:', error);
    res.status(500).json({
      error: 'Failed to generate summary',
      details: error.message
    });
  }
});

// Email sending endpoint
app.post('/api/send-email', async (req, res) => {
  try {
    const { recipients, subject, summary } = req.body;

    if (!recipients || !recipients.length) {
      return res.status(400).json({ error: 'No recipients provided' });
    }

    await sendEmail(
      recipients,
      subject || 'Meeting Summary',
      summary
    );

    res.json({
      success: true,
      message: `Email sent to ${recipients.length} recipient(s)`
    });

  } catch (error) {
    console.error('Email error:', error);
    res.status(500).json({
      error: 'Failed to send email',
      details: error.message
    });
  }
});

// Start the server (only in non-Vercel environment)
if (process.env.VERCEL !== '1') {
  app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
  });
}

// Export for Vercel
module.exports = app;